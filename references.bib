@inproceedings{fastcurry,
abstract = {Higher-order languages that encourage currying are implemented using one of two basic evaluation models: push/enter or eval/apply. Implementors use their intuition and qualitative judgements to choose one model or the other.},
author = {Marlow, Simon and Jones, Simon Peyton},
booktitle = {Proceedings of the ninth ACM SIGPLAN international conference on Functional programming  - ICFP '04},
doi = {10.1145/1016850.1016856},
isbn = {1581139055},
issn = {03621340},
pages = {4},
title = {{Making a fast curry}},
url = {http://portal.acm.org/citation.cfm?doid=1016850.1016856},
year = {2004}
}
@inproceedings{Johnsson1985,
abstract = {Lambda lifting is a technique for transforming a functional program with local function definitions, possibly with free variables in the function definitions, into a program consisting only of global function (combinator) definitions which will be used as rewrite rules. Different ways of doing lambda lifting are presented, as well as reasons for rejecting or selecting the method used in our Lazy ML compiler. An attribute grammar and a functional program implementing the chosen algorithm is given.},
author = {Johnsson, Thomas},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/3-540-15975-4_37},
isbn = {9783540159759},
issn = {16113349},
pages = {190--203},
title = {{Lambda lifting: Transforming programs to recursive equations}},
volume = {201 LNCS},
year = {1985}
}
